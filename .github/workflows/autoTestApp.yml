name: AutoTestApp

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  # 定义全局变量
  API_KEY: "3f7c06d07dfbf6cbb04618cb67e1e0d7"  # 在这里指定 API Key
  APK_FILE_PATH: "apk/app-newest.apk"         # 在这里指定 APP 文件路径
  JOB_ID: 4710                                # 在这里指定 Job ID，默认值为 4710
  PROJECT_ID: 1944025                         # 在这里指定 Project ID，默认值为 1944025
  EMAIL: "nibingbing@testin.cn"               # 在这里指定登录邮箱
  PASSWORD: "9624564eebc9a3c388f29598779f6215" # 在这里指定登录密码（建议使用加密方式存储）
  UPLOAD_ANDROID: "1"                         # 是否需要上传安卓 APK 文件？(1 表示是，0 表示否)
  UPLOAD_IOS: "0"                             # 是否需要上传 iOS IPA 文件？(1 表示是，0 表示否)

jobs:
  autotest-app:
    runs-on: ubuntu-latest
    steps:
      # 调试：打印 upload_android 和 upload_ios 的值
      - name: Debug upload values
        run: |
          echo "是否需要上传安卓APP->upload_android value:${{ env.UPLOAD_ANDROID }}"
          echo "是否需要上传iOSAPP->upload_ios value:${{ env.UPLOAD_IOS }}"

      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 检查 APP 文件是否存在，并解析文件类型
      - name: Check APP existence and parse file type
        id: app-info
        if: env.UPLOAD_ANDROID == '1' || env.UPLOAD_IOS == '1'
        run: |
          if [ ! -f "${{ env.APK_FILE_PATH }}" ]; then
            echo "APP 文件不存在！"
            exit 1
          fi

          # 提取文件名和扩展名
          FILE_NAME=$(basename "${{ env.APK_FILE_PATH }}")
          FILE_EXTENSION="${FILE_NAME##*.}"
          echo "文件名：$FILE_NAME"
          echo "文件扩展名：$FILE_EXTENSION"

          # 初始化 should_upload
          SHOULD_UPLOAD="false"

          # 判断文件类型并匹配上传条件
          if [[ "$FILE_EXTENSION" == "apk" && "${{ env.UPLOAD_ANDROID }}" == "1" ]]; then
            echo "检测到安卓 APK 文件，准备上传..."
            SHOULD_UPLOAD="true"
          elif [[ "$FILE_EXTENSION" == "ipa" && "${{ env.UPLOAD_IOS }}" == "1" ]]; then
            echo "检测到 iOS IPA 文件，准备上传..."
            SHOULD_UPLOAD="true"
          else
            echo "文件类型不符合上传条件，跳过上传。"
          fi

          # 设置环境变量
          echo "should_upload=$SHOULD_UPLOAD" >> $GITHUB_ENV

      # 3. 调用 Testin 登录接口并提取 result 值
      - name: 调用 Testin 登录接口
        id: login
        if: env.should_upload == 'true'
        run: |
          TIMESTAMP=$(date +%s%3N)
          REQUEST_DATA=$(cat <<EOF
          {
            "apikey": "${{ env.API_KEY }}",
            "mkey": "usermanager",
            "op": "Login.login",
            "data": {
              "email": "${{ env.EMAIL }}",
              "pwd": "${{ env.PASSWORD }}"
            },
            "action": "user",
            "timestamp": ${TIMESTAMP}
          }
          EOF
          )
          RESPONSE=$(curl -s -X POST "https://openapizyy.testin.cn" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_DATA")
          echo "登录接口返回结果：$RESPONSE"
          RESULT=$(echo "$RESPONSE" | grep -o '"result":"[^"]*"' | awk -F':' '{print $2}' | sed 's/"//g')
          if [ -z "$RESULT" ]; then
            echo "未提取到有效的 result 值！"
            exit 1
          fi
          echo "::set-output name=result::$RESULT"

      # 4. 使用提取到的 result 值上传 APP 文件
      - name: 上传 APP 文件
        id: upload
        if: env.should_upload == 'true'
        run: |
          echo "开始上传 APP 文件..."

          # 打印登录返回的 sid 值
          SID=${{ steps.login.outputs.result }}
          echo "登录返回的 sid 值：$SID"

          # 动态生成时间戳
          TIMESTAMP=$(date +%s%3N)

          # 构造 UPLOAD-JSON 头
          UPLOAD_JSON='{"apikey":"'${{ env.API_KEY }}'","timestamp":'"${TIMESTAMP}"',"sid":"'"${SID}"'","sig":"f7ad7cb8ab1700de3fce03c983f201e9","mkey":"fs","action":"fs","op":"File.upload","data":{"suffix":"'"${FILE_EXTENSION}"'"}}'
          echo "构造的 UPLOAD-JSON 头：$UPLOAD_JSON"

          # 使用 curl -v 打印详细请求日志
          UPLOAD_RESPONSE=$(curl -s -X POST "https://openapizyy.testin.cn" \
            -H "UPLOAD-JSON: $UPLOAD_JSON" \
            -F "file=@${{ env.APK_FILE_PATH }}")

          # 打印上传接口返回结果
          echo "上传接口返回结果：$UPLOAD_RESPONSE"

          # 解析返回值（假设返回 JSON 格式）
          STATUS=$(echo "$UPLOAD_RESPONSE" | jq -r '.msg')
          PACKAGE_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.data.result')

          # 打印解析后的返回值
          echo "上传状态：$STATUS"
          echo "上传结果的 packageUrl：$PACKAGE_URL"

          # 错误处理
          if [ "$STATUS" != "成功" ]; then
            echo "上传失败！错误信息：$UPLOAD_RESPONSE"
            exit 1
          fi

          # 将 packageUrl 设置为输出变量
          echo "::set-output name=packageUrl::$PACKAGE_URL"

      # 5. 执行定时任务
      - name: 执行定时任务
        if: env.should_upload == 'true'
        run: |
          # 获取全局变量 JOB_ID 和 PROJECT_ID
          echo "定时任务参数："
          echo "Job ID：${{ env.JOB_ID }}"
          echo "Project ID：${{ env.PROJECT_ID }}"

          # 如果上传了 APP 文件，则获取上传结果的 packageUrl
          PACKAGE_URL=${{ steps.upload.outputs.packageUrl }}
          echo "Package URL：$PACKAGE_URL"
          APP_INFO=', "appinfo": { "packageUrl": "'"$PACKAGE_URL"'" }'

          # 动态生成时间戳
          TIMESTAMP=$(date +%s%3N)

          # 构造请求体
          REQUEST_DATA=$(cat <<EOF
          {
            "apikey": "${{ env.API_KEY }}",
            "timestamp": ${TIMESTAMP},
            "sid": "${{ steps.login.outputs.result }}",
            "mkey": "realtest",
            "action": "app",
            "op": "ScheduledJob.execute",
            "data": {
              "jobId": ${{ env.JOB_ID }},
              "projectid": ${{ env.PROJECT_ID }}
              ${APP_INFO}
            }
          }
          EOF
          )

          # 打印请求体
          echo "构造的请求体：$REQUEST_DATA"

          # 发送请求并捕获响应
          RESPONSE=$(curl -s -X POST "https://openapizyy.testin.cn" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_DATA")

          # 打印响应结果
          echo "定时任务接口返回结果：$RESPONSE"

          # 解析返回值
          TASK_STATUS=$(echo "$RESPONSE" | jq -r '.msg')

          # 打印解析后的返回值
          echo "定时任务状态：$TASK_STATUS"

          # 错误处理
          if [ "$TASK_STATUS" != "成功" ]; then
            echo "定时任务失败！错误信息：$RESPONSE"
            exit 1
          fi
